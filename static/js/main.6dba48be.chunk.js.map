{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","className","onSubmit","event","preventDefault","id","Math","floor","random","text","type","placeholder","value","name","required","onChange","target","ref","Todo","todos","completeTodo","removeTodo","updateTodo","edit","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAEe,SAASA,EAAUC,GAC9B,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAmBrB,OACI,8BACI,uBAAMC,UAAU,YAAYC,SAbf,SAAAC,GACjBA,EAAMC,iBAENZ,EAAMU,SAAS,CACXG,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMf,IAEVC,EAAS,KAML,UACI,uBACAe,KAAK,OACLC,YAAY,aACZC,MAAOlB,EACPmB,KAAK,OACLZ,UAAU,aACVa,UAAQ,EACRC,SA1Ba,SAAAZ,GACrBA,EAAMC,iBACNT,EAASQ,EAAMa,OAAOJ,QAyBdK,IAAKrB,IAEL,wBAAQK,UAAU,cAAlB,2B,oBCnCD,SAASiB,EAAT,GAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC3D,EAAwB7B,mBAAS,CAC7BY,GAAI,KACJO,MAAO,KAFX,mBAAOW,EAAP,KAAaC,EAAb,KAaC,OAAID,EAAKlB,GACE,cAACd,EAAD,CAAUgC,KAAMA,EAAMrB,SATb,SAAAU,GACjBU,EAAWC,EAAKlB,GAAIO,GACpBY,EAAQ,CACJnB,GAAI,KACJO,MAAO,QAQRO,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACb,sBACA1B,UAAWyB,EAAKE,WAAa,oBAAsB,WADnD,UAII,qBAAmBC,QAAS,kBAAMT,EAAaM,EAAKrB,KAApD,SACKqB,EAAKjB,MADAiB,EAAKrB,IAGf,sBAAKJ,UAAU,QAAf,UACI,cAAC,IAAD,CACA4B,QAAU,kBAAMR,EAAWK,EAAKrB,KAChCJ,UAAU,gBAEV,cAAC,IAAD,CACA4B,QAAU,kBAAML,EAAQ,CAACnB,GAAIqB,EAAKrB,GAAIO,MAAOc,EAAKjB,QAClDR,UAAU,mBAZb0B,MCtBE,SAASG,IAEpB,MAA0BrC,mBAAS,IAAnC,mBAAO0B,EAAP,KAAcY,EAAd,KAoCA,OACI,gCACI,4DACA,cAACxC,EAAD,CAAUW,SArCF,SAAAwB,GAAS,IAAD,EAGpB,GAAKA,EAAKjB,OAAQ,QAAQuB,KAAKN,EAAKjB,MAApC,CAIA,IAAMwB,EAAQ,CAAIP,GAAJ,mBAAaP,IAC3BY,EAASE,IACT,EAAAC,SAAQC,IAAR,oBAAehB,QA6BX,cAACD,EAAD,CACAC,MAASA,EACTC,aAhBa,SAAAf,GACjB,IAAI+B,EAAejB,EAAMM,KAAI,SAAAC,GAIzB,OAHIA,EAAKrB,KAAOA,IACZqB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASK,IAULf,WAtBW,SAAAhB,GACf,IAAMgC,EAAY,YAAIlB,GAAOmB,QAAO,SAAAZ,GAAI,OAAIA,EAAKrB,KAAOA,KACxD0B,EAASM,IAqBLf,WA9BW,SAACiB,EAAQC,GACnBA,EAAS/B,OAAQ,QAAQuB,KAAKQ,EAAS/B,OAG5CsB,GAAS,SAAAU,GAAI,OAAIA,EAAKhB,KAAI,SAAAiB,GAAI,OAAKA,EAAKrC,KAAOkC,EAASC,EAAWE,c,MCpB5D,SAASC,IAEtB,MAAWlD,qBAAX,eAGA,OACE,qBAAKQ,UAAU,WAAf,SACE,cAAC6B,EAAD,MCPNc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6dba48be.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function TodoForm (props) {\n    const [input, setInput] = useState('');\n\n    const inputRef = useRef(null);\n    \n    useEffect(() => {\n        inputRef.current.focus()\n    })\n\n    const handleTodoChange = event => {\n        event.preventDefault();\n        setInput(event.target.value);\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        props.onSubmit({\n            id: Math.floor(Math.random() * 100000),\n            text: input\n        })\n        setInput(\"\");\n    }\n\n\n    return (\n        <div>\n            <form className=\"todo-form\" onSubmit={handleSubmit}>\n                <input \n                type=\"text\"\n                placeholder=\"Add a todo\" \n                value={input}\n                name=\"text\"\n                className=\"todo-input\"\n                required\n                onChange={handleTodoChange}\n                ref={inputRef}\n                />\n                <button className=\"todo-button\">Add todo</button>   \n            </form>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport TodoForm from './TodoForm'\nimport { RiCloseCircleLine } from 'react-icons/ri'\nimport { TiEdit } from 'react-icons/ti'\n\nexport default function Todo({todos, completeTodo, removeTodo, updateTodo}) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n     if (edit.id) {\n         return <TodoForm edit={edit} onSubmit={submitUpdate} />\n     }\n\n    return todos.map((todo, index) => (\n        <div \n        className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n        key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className=\"icons\">\n                <RiCloseCircleLine \n                onClick= {() => removeTodo(todo.id)}\n                className=\"delete-icon\"\n                />\n                <TiEdit \n                onClick= {() => setEdit({id: todo.id, value: todo.text})}\n                className=\"edit-icon\"\n                />\n            </div>\n        </div>\n\n    ));\n\n}\n","import React, { useState } from 'react'\nimport Todo from './Todo';\nimport TodoForm from './TodoForm'\n\nexport default function TodoList() {\n\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n\n        // Remove extra spaces in todo\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n        setTodos(newTodos);\n        console.log(...todos);\n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    }\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id);\n        setTodos(removeArr);\n    }\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    }\n\n    return (\n        <div>\n            <h1>What would you like to do?</h1>\n            <TodoForm onSubmit={addTodo}/>\n            <Todo \n            todos = {todos}\n            completeTodo = {completeTodo}\n            removeTodo = {removeTodo}\n            updateTodo = {updateTodo}\n            />\n        </div>\n    )\n\n}\n","import React, { useState } from \"react\";\nimport TodoList from \"./components/TodoList\";\nimport './App.css'\n\nexport default function App() {\n\n  const [] = useState();\n\n\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}